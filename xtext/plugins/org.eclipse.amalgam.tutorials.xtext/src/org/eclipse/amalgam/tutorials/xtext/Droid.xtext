/******************************************************************************
 * Copyright (c) 2011 Reinaldo Junior.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Reinaldo Junior (Google Summer of Code) - initial API and implementation
 ******************************************************************************/

grammar org.eclipse.amalgam.tutorials.xtext.Droid with org.eclipse.xtext.common.Terminals

generate droid "http://www.eclipse.org/amalgam/tutorials/xtext/Droid"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Application:
	'application' name=STRING packageName=QualifiedName
	'{'
		(manifest=ManifestFile)?
		(resources+=Resource | layouts+=Layout | activities+=Activity)+

		//elements+=ApplicationElement+ //Will not care about the order
		
		/*
		resources+=Resource*	//Resources first
		layouts+=Layout*
		activities+=Activity+	//Activities Next
		*/
		
		//services+=[Service|QualifiedName]*
		//fragments+=[Fragments|QualifiedName]*
	'}'
;

//Teria que criar um id diferente pra cada uma das classes concretas
//ApplicationElement:
//	(Resource | Activity)
//;

ManifestFile:
	{ManifestFile}
	'manifest' '{'
/*
    #permission
    #api level
    #features
    #libraries
    #intent-filter
    #requirements
*/
	'}'
;


Resource:
	(GenericResource /* | Layout */ | MenuResource | ValueResource | DrawableResource | AnimationResource)
;

//?
GenericResource:
	'resource' {GenericResource} name=ID '{'
		//widgets+=Widget*
	'}'
;

//PENDING
//Implement attributes: http://developer.android.com/guide/topics/resources/menu-resource.html
MenuResource:
	'menu' {MenuResource} name=ID '{'
		(menuItems+=MenuItem | subMenus+=SubMenu | groups+=MenuItemGroup)*
	'}'
;

MenuItem:
	'item' {MenuItem} '{'
		subMenus+=SubMenu*
	'}'
;

MenuItemGroup:
	'group' {MenuGroup} '{'
		items+=MenuItem+
	'}'
;

SubMenu:
	'submenu' {SubMenu} '{'
		(menuItems+=MenuItem | groups+=MenuItemGroup)*
	'}'
;




ValueResource:
	(
	  StringValueResource | IntegerValueResource |
	  BooleanValueResource | ColorValueResource |
	  DimensionValueResource  | ArrayValueResource 
	)
;

StringValueResource:
	'string' name=ID '=' value=STRING
;

IntegerValueResource:
	'integer' name=ID '=' value=INT
;

BooleanValueResource:
	'bool' name=ID '=' value=BOOL
;

ColorValueResource:
	'color' name=ID '=' value=HEX_COLOR
;

DimensionValueResource:
	'dimension' name=ID '=' value=FLOAT unit=DimensionKind
;

ArrayValueResource:
	'array'
/*
	('(string)' {StringArrayValueResource} | '(integer)' {IntegerArrayValueResource} )?
	name=ID '=' '['
*/
	(IntegerArrayValueResource | StringArrayValueResource | TypedArrayValueResource)
;

/*
array primeira = [
	referencia para recurso ou tipo primitivo =D
]

array(string) segunda = [
  "ahusua", "ahsuahsuhaus", "iasiasiajsi", "ijasiajisjaisjia"
] 

array(integer) terceira = [
	1, 2, 3, 4, 5
]

*/

//Deveria criar algo como ResourceRefecence para englobar esse conceito:
//ResourceRefecenre:
//internalResource=[ValueResource] | '(' externalResource=ID ')' ;
IntegerArrayValueResource:
	'(integer)' {IntegerArrayValueResource}
	name=ID '=' '['
		(items+=INT (',' items+=INT)* )?
	']'
;

StringArrayValueResource:
	'(string)' {StringArrayValueResource}
	name=ID '=' '['
		(items+=STRING (',' items+=STRING)* )?
	']'
;

TypedArrayValueResource:
	{TypedArrayValueResource}
	name=ID '=' '['
		(items+=PropertyValue (',' items+=PropertyValue)* )?
/*		(
		 (internalItem+=[ValueResource]? & ('(' externalItem+=ID ')')? & (valueItem=VALUE =p )?
		)*
*/
	']'
;

//http://developer.android.com/guide/topics/resources/drawable-resource.html
DrawableResource:
	(BitmapDrawableResource | TransitionDrawableResource)
;

//http://developer.android.com/guide/topics/resources/drawable-resource.html#Bitmap
BitmapDrawableResource:
	'bitmap' name=ID '=' filename=ID
;

//http://developer.android.com/guide/topics/resources/drawable-resource.html#Transition
TransitionDrawableResource:
	'transition' from=[DrawableResource] '<->' to=[DrawableResource]
;


AnimationResource:
	(TweenAnimationResource | FrameAnimationResource)
;

AnimationElement:
	(AnimationSet | AlphaAnimation | ScaleAnimation | TranslateAnimation | RotateAnimation)
;

AnimationSet:
	'set' '{'
	(shareInterpolator?='shared'
	'interpolator' interpolator=InterpolatorPropertyValue)?
		animationElements+=AnimationElement+
	'}'
;

AlphaAnimation:
	'fade:' {AlphaAnimation}
	(
	 //TODO - Add more properties
	 ('from' fromAlpha=FLOAT)? &
	 ('to' toAlpha=FLOAT)?
	)//?
;

ScaleAnimation:
	'scale:' {ScaleAnimation}
	(
	 (
	 	'fromScale' '(' fromScaleX=FLOAT ',' fromScaleY=FLOAT ')'
	 	'toScale' 	'(' toScaleX=FLOAT ',' toScaleY=FLOAT ')' |
	 	'scale' '(' fromScaleX=FLOAT ',' fromScaleY=FLOAT ')'
	 	'->' 	'(' toScaleX=FLOAT ',' toScaleY=FLOAT ')' |
		(
		  ('fromScaleX' fromScaleX=FLOAT)? &
		  ('toScaleX' 	toScaleX=FLOAT)?   &
		  ('fromScaleY' fromScaleY=FLOAT)? &
		  ('toScaleY' toScaleY=FLOAT)?
		) //?
	 )? &
	 (
	   'pivot' '(' pivotX=FLOAT ',' pivotY=FLOAT ')' |
	   	(('pivotX' pivotX=FLOAT)? & ('pivotY' pivotY=FLOAT)?)
	 )? //&
	 //TODO - Add more properties
	)	
;

TranslateAnimation:
	'translate:' {ScaleAnimation}
	(
	 (
	 	'fromDelta' '(' fromXDelta=DeltaValue ',' fromYDelta=DeltaValue ')'
	 	'toDelta' 	'(' toXDelta=DeltaValue ',' toYDelta=DeltaValue ')' |
	 	'delta' '(' fromXDelta=DeltaValue ',' fromYDelta=DeltaValue ')'
	 	'->' 	'(' toXDelta=DeltaValue ',' toYDelta=DeltaValue ')' |
		(
		  ('fromXDelta' fromXDelta=DeltaValue)? &
		  ('toXDelta' 	toXDelta=DeltaValue)?   &
		  ('fromYDelta' fromYDelta=DeltaValue)? &
		  ('toYDelta' toYDelta=DeltaValue)?
		)
	 )? //&
	 //TODO - Add more properties
	)
;

RotateAnimation:
	'translate:' {RotateAnimation}
	(
	 (
	 	'degrees' '(' fromDegrees=FLOAT ')' '->' '(' toDegrees=FLOAT ')' |
		(
		  ('fromDegrees' fromDegrees=FLOAT)? &
		  ('toDegrees' 	toDegrees=FLOAT)?
		)
	 )? &
	 (
	   'pivot' '(' pivotX=DeltaValue ',' pivotY=DeltaValue ')' |
	   	(('pivotX' pivotX=DeltaValue)? & ('pivotY' pivotY=DeltaValue)?)
	 )? //&
	 //TODO - Add more properties
	)

;

TweenAnimationResource:
	'tweenAnimation' {TweenAnimationResource} name=ID '{'
		animationElements+=AnimationElement+
	'}'
;

FrameAnimationResource:
	'frameAnimation' {FrameAnimationResource} name=ID '{'
		(oneShot?='oneShot')
		animationItems+=FrameAnimationItem+
	'}'
;

FrameAnimationItem:
	'frame' drawable=DrawableResourcePropertyValue ('->' duration=INT)? 
;


Layout:
	'layout' {Layout} name=ID '{'
		widgets+=Widget*
	'}'
;


Widget:
	(GenericWidget | Button | ImageButton | Link | Spinner | EditText | TextView) //';'
;

GenericWidget:
	'widget' {GenericWidget} ('<'id=ID'>')?
	name=STRING
	(
	 ('top:' top=DimensionPropertyValue )? &
	 ('left:' left=DimensionPropertyValue )? &
	 ('width:' width=DimensionPropertyValue )? &
	 ('height:' height=DimensionPropertyValue )? &
	 ('background:' background=DrawableResourcePropertyValue )? &
	 ('clickable?' clickable=BooleanPropertyValue )? &
	 ('fadeScrollBars?' fadeScrollBars=BooleanPropertyValue )? &
	 ('isScrollContainer?' isScrollContainer=BooleanPropertyValue )?
	 // Specific properties
	)
	('->' actions+=Action )*
;

TextView:
	'textView' {TextView} ('<'id=ID'>')?
	text=StringPropertyValue
	(
	 ('top:' top=DimensionPropertyValue )? &
	 ('left:' left=DimensionPropertyValue )? &
	 ('width:' width=DimensionPropertyValue )? &
	 ('height:' height=DimensionPropertyValue )? &
	 ('background:' background=DrawableResourcePropertyValue )? &
	 ('clickable?' clickable=BooleanPropertyValue )? &
	 ('fadeScrollBars?' fadeScrollBars=BooleanPropertyValue )? &
	 ('isScrollContainer?' isScrollContainer=BooleanPropertyValue )? &
	 // Specific properties
	 ('hint:' hint=StringPropertyValue)? &
	 ('textColor:' textColor=ColorPropertyValue)?
	)
	('->' actions+=Action )*
;

Button:
	'button' {Button} ('<'id=ID'>')?
	text=StringPropertyValue
	(
	 ('top:' top=DimensionPropertyValue )? &
	 ('left:' left=DimensionPropertyValue )? &
	 ('width:' width=DimensionPropertyValue )? &
	 ('height:' height=DimensionPropertyValue )? &
	 ('background:' background=DrawableResourcePropertyValue )? &
	 ('clickable?' clickable=BooleanPropertyValue )? &
	 ('fadeScrollBars?' fadeScrollBars=BooleanPropertyValue )? &
	 ('isScrollContainer?' isScrollContainer=BooleanPropertyValue )? &
	 // Specific properties
	 ('hint:' hint=StringPropertyValue)? &
	 ('textColor:' textColor=ColorPropertyValue)?
	)
	('->' actions+=Action )*
;

ImageButton:
	'imageButton' {ImageButton} ('<'id=ID'>')?
	src=DrawableImageResourcePropertyValue
	(
	 ('top:' top=DimensionPropertyValue )? &
	 ('left:' left=DimensionPropertyValue )? &
	 ('width:' width=DimensionPropertyValue )? &
	 ('height:' height=DimensionPropertyValue )? &
	 ('background:' background=DrawableResourcePropertyValue )? &
	 ('clickable?' clickable=BooleanPropertyValue )? &
	 ('fadeScrollBars?' fadeScrollBars=BooleanPropertyValue )? &
	 ('isScrollContainer?' isScrollContainer=BooleanPropertyValue )? &
	 // Specific properties
	 ('hint:' hint=StringPropertyValue)? &
	 ('textColor:' textColor=ColorPropertyValue)?
	)
	('->' actions+=Action )*
;

//Button to an Activity
Link:
	'link' {Link} ('<'id=ID'>')?
	text=StringPropertyValue
	(
	 ('top:' top=DimensionPropertyValue )? &
	 ('left:' left=DimensionPropertyValue )? &
	 ('width:' width=DimensionPropertyValue )? &
	 ('height:' height=DimensionPropertyValue )? &
	 ('background:' background=DrawableResourcePropertyValue )? &
	 ('clickable?' clickable=BooleanPropertyValue )? &
	 ('fadeScrollBars?' fadeScrollBars=BooleanPropertyValue )? &
	 ('isScrollContainer?' isScrollContainer=BooleanPropertyValue )? &
	 // Specific properties
	 ('hint:' hint=StringPropertyValue)? &
	 ('textColor:' textColor=ColorPropertyValue)?
	)
	'to' target=[Activity]
	('->' actions+=Action )*
;

//--Parei aqui


Spinner:
	'spinner' {Spinner} ('<'id=ID'>')?
	(
	 ('top:' top=DimensionPropertyValue )? &
	 ('left:' left=DimensionPropertyValue )? &
	 ('width:' width=DimensionPropertyValue )? &
	 ('height:' height=DimensionPropertyValue )? &
	 ('background:' background=DrawableResourcePropertyValue )? &
	 ('clickable?' clickable=BooleanPropertyValue )? &
	 ('fadeScrollBars?' fadeScrollBars=BooleanPropertyValue )? &
	 ('isScrollContainer?' isScrollContainer=BooleanPropertyValue )? &
	 //Spinner properties
	 ('prompt:' prompt=StringPropertyValue)?
	)
;

EditText:
	'editText' {EditText} ('<'id=ID'>')?
	text=StringPropertyValue

	(
	 ('top:' top=DimensionPropertyValue )? &
	 ('left:' left=DimensionPropertyValue )? &
	 ('width:' width=DimensionPropertyValue )? &
	 ('height:' height=DimensionPropertyValue )? &
	 ('background:' background=DrawableResourcePropertyValue )? &
	 ('clickable?' clickable=BooleanPropertyValue )? &
	 ('fadeScrollBars?' fadeScrollBars=BooleanPropertyValue )? &
	 ('isScrollContainer?' isScrollContainer=BooleanPropertyValue )? &
	 //EditText properties
	 ('hint:' hint=StringPropertyValue)? &
	 ('textColor:' textColor=ColorPropertyValue)? &
	 ('editable?' editable=BooleanPropertyValue)? &
	 ('numeric?' numeric=BooleanPropertyValue)? &
	 ('password?' password=BooleanPropertyValue)? &
	 ('phoneNumber?' phoneNumber=BooleanPropertyValue)?
	)
;



Activity:
	(GenericActivity | ListActivity | TabActivity)
;

GenericActivity:
	'activity' name=QualifiedName '{'
		(actions+=Action)*
	'}'
;

ListActivity:
	'listActivity' name=QualifiedName '{'
		'data' dataSource=ID
		('layout' layout=[Layout])?
		'item' itemLayout=[Layout]
		(actions+=Action)*
	'}'

;

TabActivity:
	'tabActivity' name=QualifiedName '{'
		(tabs+=Tab)+
	'}'
;

Tab:
	'tab' activity=[Activity]
;


Action:
	(GenericAction | GoToURLAction /* | LoadURLAction */ | ShowLayoutAction | InvokeActivityAction | LoadResourceAction)
;

/*
Action

ActionCondicional
 -> Action(semCondicao) + condicao
	('if' condition+=Action )?
*/


/*
//ExtraComplexity
ConditionalAction
contition=Conditional

Conditional
firstCondition+=Conditional
(operador=Operator
secondCondition+=Conditional)?
*/

GenericAction:
	'action'
	name=QualifiedName
;

GoToURLAction:
	'goTo'
	url=URL
;

ShowLayoutAction:
	'show'
	layout=[Layout]
;

InvokeActivityAction:
	'invoke'
	activity=[Activity|QualifiedName]
;

//Loads a fixed resource
//TODO: Load a dinamic resource from a URL, loadJson for example
LoadResourceAction:
	'load' resource=ID
	('->' toVar=ID)?
	('=>' afterLoad=Action)?
;


PropertyValue:
	(
	  StringPropertyValue | IntegerPropertyValue |
	  BooleanPropertyValue | ColorPropertyValue |
	  DimensionPropertyValue | /*
	  IntegerArrayPropertyValue | StringArrayPropertyValue |
	  Typed ArrayPropertyValue */
	  DrawableResourcePropertyValue
	)
;


/*
button<primeiro>
  top 		= 20
  bottom 	= default_button_position
  left 		= (outro_valor)
*/

StringPropertyValue:
	(value=STRING |  (resource=[StringValueResource] | '(' externalResource=ID ')' ))
;

IntegerPropertyValue:
	(value=INT | (resource=[IntegerValueResource] | '(' externalResource=ID ')' ))
;

BooleanPropertyValue:
	(value=BOOL | (resource=[BooleanValueResource] | '(' externalResource=ID ')' ))
;

ColorPropertyValue:
	(value=HEX_COLOR | (resource=[ColorValueResource] | '(' externalResource=ID ')' ))
;

DimensionPropertyValue:
	(value=FLOAT | (resource=[DimensionValueResource] | '(' externalResource=ID ')' ))
;

DrawableResourcePropertyValue:
	(value=HEX_COLOR | (resource=[DrawableResource] | '(' externalResource=ID ')' ))
;

DrawableImageResourcePropertyValue:
	(resource=[DrawableResource] | '(' externalResource=ID ')' )
;

InterpolatorPropertyValue:
	(predefinedInterpolator=InterpolatorsKind | '(' customInterpolator=ID ')')
;

enum DimensionKind :
  dp | sp | pt | px | mm | in
;

enum InterpolatorsKind :
  accelerate_decelerate |
  accelerate |
  anticipate |
  anticipate_overshoot |
  bounce |
  cycle |
  decelerate |
  linear |
  overshoot
;

//data type rule (returns EDataType instead EClass)
//this one dont need a value converter because it handles string
QualifiedName:
	ID ('.' ID)*;

/*
QualifiedName:
	ID | ((ID '.')+ ID);
*/

//Value Converter
BOOL returns ecore::EBooleanObject:
//	'YES' | 'NO'
	'true' | 'false'
;

DeltaValue:
	INT ('%'|'%p')?
;

FLOAT returns ecore::EFloatObject:
	INT ('.' INT)?
;

terminal HEX_COLOR:
	'#' 
	    ('0'..'9'|'A'..'F'|'a'..'f') ('0'..'9'|'A'..'F'|'a'..'f')
	    ('0'..'9'|'A'..'F'|'a'..'f') ('0'..'9'|'A'..'F'|'a'..'f')
	    ('0'..'9'|'A'..'F'|'a'..'f') ('0'..'9'|'A'..'F'|'a'..'f')
	    (('0'..'9'|'A'..'F'|'a'..'f') ('0'..'9'|'A'..'F'|'a'..'f'))? 
;

URL:
	ID '://' QualifiedName ('/'  (QualifiedName '/')* )?
;