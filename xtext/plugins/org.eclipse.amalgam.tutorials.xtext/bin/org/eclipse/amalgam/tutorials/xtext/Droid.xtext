/******************************************************************************
 * Copyright (c) 2011 Reinaldo Junior.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Reinaldo Junior (Google Summer of Code) - initial API and implementation
 ******************************************************************************/

grammar org.eclipse.amalgam.tutorials.xtext.Droid with org.eclipse.xtext.common.Terminals

generate droid "http://www.eclipse.org/amalgam/tutorials/xtext/Droid"

Application:
	'application' name=STRING package=QualifiedName?
	'{'
		(manifest=ManifestFile)?
		//elements+=ApplicationElement+ //Will not care about the order
		
		layouts+=Layout*		//Layouts first
		activities+=Activity+	//Activities Next
		
		//services+=[Service|QualifiedName]*
		//fragments+=[Fragments|QualifiedName]*
	'}'
;

ApplicationElement:
	(Layout | Activity)
;

ManifestFile:
	{ManifestFile}
	'manifest' '{'
/*
    #permission
    #api level
    #features
    #libraries
    #intent-filter
    #requirements
*/
	'}'
;

Layout:
	'layout' name=ID '{'
		widgets+=Widget*
	'}'
;


Widget:
	(GenericWidget | Button | Spinner | EditText | TextView)
	('top' '=' top=INT )?
	('left' '=' left=INT )?
	('width' '=' width=INT )?
	('->' actions+=Action )*
;

GenericWidget:
	'widget' {GenericWidget}
	('<'id=ID'>')?
	name=QualifiedName
	//Generic widget properties
;

Button:
	'button' {Button} ('<'id=ID'>')?
	//Button properties
	label=STRING
;

Spinner:
	'spinner' {Spinner} ('<'id=ID'>')?
	//Spinner properties
	label=STRING
;

EditText:
	'editText' {EditText} ('<'id=ID'>')?
	//EditText properties
	label=STRING
;

TextView:
	'textView' {TextView} ('<'id=ID'>')?
	//TextView properties
	label=STRING
;

Activity:
	(GenericActivity | ListActivity | TabActivity)
;

GenericActivity:
	'activity' name=QualifiedName '{'
		(actions+=Action)*
	'}'
;

ListActivity:
	'list activity' name=QualifiedName '{'
		'data' dataSource=ID
		('layout' layout=[Layout])?
		'item' itemLayout=[Layout]
		(actions+=Action)*
	'}'

;

TabActivity:
	'tab activity' name=QualifiedName '{'
		(actions+=Action)*
	'}'

;


Action:
	(GenericAction | GoToURLAction /* | LoadURLAction */ | ShowLayoutAction | InvokeActivityAction | LoadResourceAction)
;

/*
Action

ActionCondicional
 -> Action(semCondicao) + condicao
	('if' condition+=Action )?
*/


/*
//ExtraComplexity
ConditionalAction
contition=Conditional

Conditional
firstCondition+=Conditional
(operador=Operator
secondCondition+=Conditional)?
*/

GenericAction:
	'action'
	name=QualifiedName
;

GoToURLAction:
	'go to'
	url=URL
;

ShowLayoutAction:
	'show'
	layout=[Layout]
;

InvokeActivityAction:
	'invoke'
	activity=[Activity|QualifiedName]
;

//Loads a fixed resource
//TODO: Load a dinamic resource from a URL, loadJson for example
LoadResourceAction:
	'load'
	resource=ID
	('->' toVar=ID)?
	('=>' afterLoad=Action)?
;


//data type rule (returns EDataType instead EClass)
//this one dont need a value converter because it handles string
QualifiedName:
	ID ('.' ID)*;

URL:
	ID '://' QualifiedName ('/'  (QualifiedName '/')* )?
;